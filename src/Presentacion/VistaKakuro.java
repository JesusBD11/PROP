/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Dominio.clases.partida;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog.ModalityType;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JDialog;
import javax.swing.JRootPane;
import javax.swing.Timer;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 * @file VistaKakuro.java
 * @date 20-12-2020
 * @author David Nogales
 * @brief Panel que gestiona la secci√≥n de VistaPrincipal para Jugar un Kakuro
 * 
 * Este panel contiene el kakuro en juego y los diferentes botones que dan acceso a otras funcionalidades accesibles durante una partida, como solucionar, guardar, pausar o salir.
 */
 
 /**
 * @class VistaKakuro
 * @brief Clase que extiende JPanel que inicializa, gestiona y modifica el panel de la VistaPrincipal para jugar un Kakuro.
 */

public class VistaKakuro extends javax.swing.JPanel {
    private VistaPrincipal vp;
    private boolean editionMode = false;
    private boolean playAfterEdition = false;
    private KakuroGrid kg;
    private boolean enPausa = false;
    private Timer t;
    private int time = 0;
    private boolean timerOn = false;
    private String IDPartida = "";
    private boolean partidaTerminada = false;
    //private String motivo0 = "El valor de la fila o de la columna no se encuentra dentro del Kakuro\n";
    //private String motivo1 = "Solo se pueden modificar celdas blancas";
    //private String motivo2 = "valor repetido";
    
    /**
     * Creates new form VistaJuego
     */
    public VistaKakuro() {
        initComponents();
    }

    VistaKakuro(VistaPrincipal vistaPrincipal) {
        initComponents();
        vp = vistaPrincipal;
        configTimer();
        /*resolver.setSize(80, 40);
        pausar.setSize(80, 40);
        guardar.setSize(80, 40);
        salir.setSize(80, 40);*/
        //ButtonsPanel.setSize(new Dimension(100, 500));
        //setSize(800,500);
    }
    
    public void displayKakuro(int dimensiones,boolean editionMode,boolean playAfterEdition, String [][] tablero){
        //int panelSize = (int)(dimensiones/2)*50;
        //int panelSize = 900;
        //PanelKakuro.setBorder(BorderFactory.createLineBorder(Color.black));
        this.playAfterEdition = playAfterEdition;
        this.editionMode = editionMode;
        PanelKakuro.setLayout(new BorderLayout());
        PanelKakuro.setBackground(Color.BLACK);
        //PanelKakuro.setSize(new Dimension(panelSize,panelSize));
        int n = tablero.length;
        kg = new KakuroGrid(this,n,n,editionMode, tablero);
        PanelKakuro.add(kg,java.awt.BorderLayout.CENTER);
        putClientProperty("JInternalFrame.isPalette", Boolean.TRUE);
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        ((BasicInternalFrameUI) PanelKakuro.getUI()).setNorthPane(null);
        PanelKakuro.setBorder(null);
        
        
        changeVisibilityEditionMode();
       
        if(!editionMode)switchTimer();
        if(editionMode) labelMovimiento.setVisible(false);
        //PanelKakuro.validate();
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        PanelKakuro = new javax.swing.JInternalFrame();
        ButtonsPanel = new javax.swing.JPanel();
        labelExtra = new javax.swing.JLabel();
        labelTiempo = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        pausar = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        resolver = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        guardar = new javax.swing.JButton();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        labelMovimiento = new javax.swing.JLabel();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 180), new java.awt.Dimension(0, 180), new java.awt.Dimension(32767, 180));
        salir = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );

        setPreferredSize(new java.awt.Dimension(850, 500));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        PanelKakuro.setMinimumSize(new java.awt.Dimension(300, 300));
        PanelKakuro.setPreferredSize(new java.awt.Dimension(600, 500));
        PanelKakuro.setVisible(true);
        PanelKakuro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PanelKakuroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout PanelKakuroLayout = new javax.swing.GroupLayout(PanelKakuro.getContentPane());
        PanelKakuro.getContentPane().setLayout(PanelKakuroLayout);
        PanelKakuroLayout.setHorizontalGroup(
            PanelKakuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 841, Short.MAX_VALUE)
        );
        PanelKakuroLayout.setVerticalGroup(
            PanelKakuroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
        );

        add(PanelKakuro);

        ButtonsPanel.setMinimumSize(new java.awt.Dimension(140, 500));
        ButtonsPanel.setPreferredSize(new java.awt.Dimension(140, 500));
        ButtonsPanel.setLayout(new javax.swing.BoxLayout(ButtonsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        labelExtra.setText("Tiempo transcurrido:");
        ButtonsPanel.add(labelExtra);

        labelTiempo.setText("00:00");
        ButtonsPanel.add(labelTiempo);
        ButtonsPanel.add(filler4);

        pausar.setText("Pausar");
        pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarActionPerformed(evt);
            }
        });
        ButtonsPanel.add(pausar);
        ButtonsPanel.add(filler1);

        resolver.setText("Resolver");
        resolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolverActionPerformed(evt);
            }
        });
        ButtonsPanel.add(resolver);
        ButtonsPanel.add(filler2);

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        ButtonsPanel.add(guardar);
        ButtonsPanel.add(filler5);

        labelMovimiento.setText("Introduzca un valor");
        ButtonsPanel.add(labelMovimiento);
        ButtonsPanel.add(filler3);

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        ButtonsPanel.add(salir);

        add(ButtonsPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void configTimer(){
        t = new Timer(1000, new ActionListener() {
           
            @Override
            public void actionPerformed(ActionEvent e) {
                setTimeInLabel();
            }
        });
    
    }
    
    public void setTimeInLabel() {
                time++;
                labelTiempo.setText(format(time / 60) + ":" + format(time % 60));
                System.out.println(labelTiempo.getText());
    
    }
    public void setIniTime(int ini){
        time = ini;
    }
    private void switchTimer(){
        if(timerOn){
            t.stop();
        }else{
            t.start();
        }
        timerOn = !timerOn;
    }
    private String format(int i) {
        String result = String.valueOf(i);
        if (result.length() == 1) {
            result = "0" + result;
        }
        return result;
    }
    
    
    private int getTimeFromLabel() {
        return time;
    }
    private void changeVisibilityEditionMode(){
        if(editionMode){
            labelExtra.setVisible(false);
            labelTiempo.setVisible(false);
            pausar.setVisible(false);
            resolver.setVisible(false);
        }
        else{
            labelExtra.setVisible(true);
            labelTiempo.setVisible(true);
            pausar.setVisible(true);
            resolver.setVisible(true);
        }
    }
    
    private void resolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolverActionPerformed
        System.out.println("resolver kakuro!!!");
        String [][] contents = vp.resolverKakuroEnJuego();
         //Eliminar esto****************
            System.out.println("Contenido de kakuro resulelto");
            for(int i = 0; i<contents.length;i++){
                for(int j = 0; j<contents[0].length;j++){
                    System.out.print(contents[i][j]+" ");
                }
                System.out.println();
            }
            //******************************
        kg.setContents(contents);
        guardar.setEnabled(false);
        resolver.setEnabled(false);
        pausar.setEnabled(false);
        if(!editionMode && !partidaTerminada)switchTimer();
        PanelKakuro.setEnabled(false);
        kg.setEnabled(false);
        partidaTerminada = true;
    }//GEN-LAST:event_resolverActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.out.println("salir pressed!!!");
        if(editionMode){
            editionMode= false;
            vp.playAfterEdition(false);
            playAfterEdition =false;
            changeVisibilityEditionMode();
            vp.changeToCrearKakuro();
        }
        else {
            vp.changeToMenu();
        }
        t.stop();
        setIniTime(0);
    }//GEN-LAST:event_salirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        int idKakuroGuardado = 0;
        boolean finished = false;
        System.out.println("guardar partida!!!");
        if(editionMode)
        { 
            editionMode= false;  
            changeVisibilityEditionMode();
            String [][] contents = kg.getGridContentsMatrix();
            
            //Eliminar esto****************
            System.out.println("Contenido a guardar.........");
            for(int i = 0; i<contents.length;i++){
                for(int j = 0; j<contents[0].length;j++){
                    System.out.print(contents[i][j]+" ");
                }
                System.out.println();
            }
            //******************************
            String[] idK;
            idK = vp.generarKakuroManual(contents).split(" ");
            idKakuroGuardado = Integer.parseInt(idK[0]);
             String dif;                
             
                if(playAfterEdition) 
                {
                    vp.playAfterEdition(false);
                    if(idKakuroGuardado>0){
                        double dific = Double.parseDouble(idK[1]);                
                        if (dific >= 0.65) dif = ", facil";
                        else if (dific < 0.65 && dific > 0.55) dif = ", normal";
                        else dif = ", dificil";
                        vp.setUltimoKakuroGuardado(idKakuroGuardado);
                        vp.setKakuroenjuego(idKakuroGuardado);
                        vp.changeToJuego();
                    }
                    else
                    {
                        vp.setUltimoKakuroGuardado(idKakuroGuardado);
                        vp.changeToCrearKakuro();
                    }
                    playAfterEdition =false;
                }
                else
                {
                    if(idKakuroGuardado>0)
                    {
                        double dific = Double.parseDouble(idK[1]);                
                        if (dific >= 0.625) dif = ", facil";
                        else if (dific < 0.625 && dific > 0.55) dif = ", normal";
                        else dif = ", dificil";
                        vp.setUltimoKakuroGuardado(idKakuroGuardado);
                        vp.setDificultadCrearKakuro(dif);
                        vp.changeToCrearKakuro();
                    }
                    else
                    {
                        vp.setUltimoKakuroGuardado(idKakuroGuardado);
                        vp.changeToCrearKakuro();
                    }
                }
            }
            
                  
        else
        {
            if(!partidaTerminada){
                switchTimer();
                System.out.println("guardando partida en juego");
                String [][] contents = kg.getGridContentsMatrix();
                int time = getTimeFromLabel();
                System.out.println("IDpartida antes del dialog: "+IDPartida);
                abrirGuardarPartidaDialog();
                switchTimer();
                System.out.println("IDpartida despues del dialog: "+IDPartida);
                vp.guardarPartida(IDPartida,contents,time,false);
            }
            
        }
        
    }//GEN-LAST:event_guardarActionPerformed

    private void pausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarActionPerformed
        System.out.println("juego pausado!!!");
        resolver.setEnabled(enPausa);
        guardar.setEnabled(enPausa);
        salir.setEnabled(enPausa);
        kg.setEditable(enPausa);
        if(!enPausa){
            enPausa = true;
        }
        else{
            enPausa = false;
        }
        switchTimer();
    }//GEN-LAST:event_pausarActionPerformed

    private void PanelKakuroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PanelKakuroMouseClicked
        //System.out.println("repainting internal jframe!!!");
        //PanelKakuro.repaint();
    }//GEN-LAST:event_PanelKakuroMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ButtonsPanel;
    private javax.swing.JInternalFrame PanelKakuro;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.JButton guardar;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel labelExtra;
    private javax.swing.JLabel labelMovimiento;
    private javax.swing.JLabel labelTiempo;
    private javax.swing.JButton pausar;
    private javax.swing.JButton resolver;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
    private String motivo3 = "valor no valido para fila o columna";
    private String motivo4 = "has ganado!";
    private String motivo5 = "valor correcto, kakuro no acabado";
    private String motivo6 = "valor no entero";
    private String motivo7 = "el valor debe estar entre 1 y 9";
    
    int comprobarMovimiento(int x, int y, String value, String[][] gridContentsMatrix) {
        int move = vp.comprobarMovimiento(x,y,value,gridContentsMatrix);
        switch(move)
        {
            case 3:
                setLabelMovimiento(motivo3);
                
                break;
            case 4:
                setLabelMovimiento(motivo4);
                if(!editionMode) switchTimer();
                resolver.setEnabled(false);
                guardar.setEnabled(false);
                pausar.setEnabled(false);
                partidaTerminada = true;
                PanelKakuro.setEnabled(false);
                kg.setEnabled(false);
                guardarPartidaFinalizada();
                break;
            case 5:
                setLabelMovimiento(motivo5);
                break;
            case 6:
                setLabelMovimiento(motivo6);
                break;
            case 7:
                setLabelMovimiento(motivo7);
                break;
            
        }
        return move;
    }

    private void setLabelMovimiento(String motivo) {
        labelMovimiento.setText(motivo);
    }

    private void guardarPartidaFinalizada() {       
        System.out.println("guardando resultados");
        String [][] contents = kg.getGridContentsMatrix();
        int time = getTimeFromLabel();
        vp.guardarPartida(IDPartida,contents,time,true);
    }
    private void abrirGuardarPartidaDialog(){
        try {
            GuardarPartidaDialog dialog = new GuardarPartidaDialog(this);
            dialog.setModalityType(ModalityType.APPLICATION_MODAL);
            dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    
    }
    public void setNombrePartida(String nombre){
        IDPartida = nombre;  
    }
}
